{
module TigerLexer

open Microsoft.FSharp.Text.Lexing
open TigerParser
open System

let keywords =
    [
       "if", IF;
       "then", THEN;
       "else", ELSE
    ] |> Map.ofList

let lexeme lexbuf = LexBuffer<char>.LexemeString lexbuf
}

let char            = ['a'-'z' 'A'-'Z']
let digit           = ['0'-'9']
let int             = '-'?digit+
let identifier      = char(char|digit|['-' '_' '.'])*
let whitespace      = [' ' '\t']
let newline         = "\n\r" | '\n' | '\r'

rule tokenize = parse
| whitespace    { tokenize lexbuf }
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf }
| int           { INT(Int32.Parse(lexeme lexbuf)) }
| identifier    { match keywords.TryFind(lexeme lexbuf) with
                  | Some(token) -> token 
                  | None -> ID(lexeme lexbuf) }
| eof           { EOF }

